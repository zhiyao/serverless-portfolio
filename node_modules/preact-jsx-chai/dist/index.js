'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports['default'] = assertJsx;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _preactRenderToStringJsx = require('preact-render-to-string/jsx');

var _preactRenderToStringJsx2 = _interopRequireDefault(_preactRenderToStringJsx);

/** Options for all assertions.
 *	@property {function} isJsx					A test to see if the given parameter is a JSX VNode. Defaults to checking for the existence of an __isVNode property
 */
var options = {
	/* If `false`, props with function values will be omitted from the comparison entirely */
	functions: true,
	/* If `false`, ignores function names and bound state, asserting only that the compared attributes are functions */
	functionNames: true
};

exports.options = options;
// options to pass to renderToString() when doing a deep comparison
var RENDER_OPTS = {
	sortAttributes: true
};

// options to pass to renderToString() when doing a shallow comparison
var SHALLOW_OPTS = _extends({}, RENDER_OPTS, {
	shallow: true
});

// for shallow comparisons, the "expected" value should NOT have high order components resolved at the root
var SHALLOW_OPTS_EXPECTED = _extends({}, SHALLOW_OPTS, {
	renderRootComponent: false
});

// for "includes" and "contains", pretty-print the diff but not the version that gets compared
var INCLUDE_RENDER_OPTS = _extends({}, RENDER_OPTS, {
	pretty: false
});

// create an assertion template string for the given action
var msg = function msg(act) {
	return 'expected #{act} to ' + act + ' #{exp}';
};

// assert that an object is JSX (or more correctly, a VNode)
var isJsx = function isJsx(obj) {
	return obj && (options.isJsx ? options.isJsx(obj) : obj.__isVNode || isVNode(obj));
};

// does it look like a vnode?
var isVNode = function isVNode(obj) {
	return obj.hasOwnProperty('nodeName') && obj.hasOwnProperty('attributes') && obj.hasOwnProperty('children') && obj.constructor.name === 'VNode';
};

// inject default options and invoke render with no context
var doRender = function doRender(jsx, opts) {
	return (0, _preactRenderToStringJsx2['default'])(jsx, null, _extends({
		functions: options.functions,
		functionNames: options.functionNames
	}, opts));
};

// inject a chai assertion if the values being tested are JSX VNodes
var ifJsx = function ifJsx(fn, opts, optsExpected, displayOpts) {
	return function (next) {
		return function (jsx) {
			for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
				args[_key - 1] = arguments[_key];
			}

			if (!isJsx(this._obj)) return next.call.apply(next, [this, jsx].concat(args));
			var actual = doRender(this._obj, opts).trim();
			var expected = doRender(jsx, optsExpected || opts).trim();
			var diffActual = displayOpts ? doRender(this._obj, displayOpts).trim() : actual;
			var diffExpected = displayOpts ? doRender(jsx, displayOpts).trim() : expected;
			return fn(this, { expected: expected, actual: actual, diffActual: diffActual, diffExpected: diffExpected, jsx: jsx });
		};
	};
};

// create a passthrough function
var through = function through(next) {
	return function () {
		for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			args[_key2] = arguments[_key2];
		}

		return next.call.apply(next, [this].concat(args));
	};
};

// assert that a String is equal to the given string
var equal = function equal(a, _ref) {
	var expected = _ref.expected;
	var actual = _ref.actual;
	var diffExpected = _ref.diffExpected;
	var diffActual = _ref.diffActual;
	return a.assert(actual === expected, msg('equal'), msg('not equal'), diffExpected, diffActual, true);
};

// assert that a String contains the given string
var include = function include(a, _ref2) {
	var expected = _ref2.expected;
	var actual = _ref2.actual;
	var diffExpected = _ref2.diffExpected;
	var diffActual = _ref2.diffActual;
	return a.assert(~actual.indexOf(expected), msg('include'), msg('not include'), diffExpected, diffActual, true);
};

/** Middleware: pass to `chai.use()` to add JSX assertion support. */

function assertJsx(_ref3) {
	var Assertion = _ref3.Assertion;

	if (Assertion.__assertJsxMounted === true) return;
	Assertion.__assertJsxMounted = true;

	Assertion.overwriteMethod('eql', ifJsx(equal, RENDER_OPTS));
	Assertion.overwriteMethod('eqls', ifJsx(equal, RENDER_OPTS));

	Assertion.overwriteMethod('equal', ifJsx(equal, SHALLOW_OPTS, SHALLOW_OPTS_EXPECTED));
	Assertion.overwriteMethod('equals', ifJsx(equal, SHALLOW_OPTS, SHALLOW_OPTS_EXPECTED));

	['include', 'includes', 'contain', 'contains'].forEach(function (method) {
		Assertion.overwriteChainableMethod(method, ifJsx(include, INCLUDE_RENDER_OPTS, INCLUDE_RENDER_OPTS, RENDER_OPTS), through);
	});
}

assertJsx.options = options;

// auto-mount if possible
if (typeof chai !== 'undefined' && chai.use) chai.use(assertJsx);
//# sourceMappingURL=data:application/json;base64,